version: '3'
services:
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
      #    ports:
      # <Port exposed> : < MySQL Port running inside container>
      #      - '3306:3306'
      #    expose:
      # Opens port 3306 on the container
      #      - '3306'
      # Where our data will be persisted
    volumes:
      - ./docker/mysql:/var/lib/mysql
   #Names our volume
#    volumes:
#      my-db:
  adminer:
    image: adminer
    restart: always
    ports:
      - 8090:8080
#    prometheus:
#      container_name: prometheus
#      image: prom/prometheus:v2.2.1
#      ports:
#        - 9090:9090
#      volumes:
#        - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      restart: always
#
#    jmx_exporter:
#      container_name: jmx_exporter
#      image: sscaling/jmx-prometheus-exporter
#      ports:
#        - 5556:5556
#      links:
#        - broker1
#        - broker2
#        - broker3
#      volumes:
#        - ./docker/jmx_exporter/config.yml:/opt/jmx_exporter/config.yml
#      restart: always
#
#    grafana:
#      image: grafana/grafana:5.0.1
#      container_name: grafana
#      ports:
#        - "3000:3000"
#      links:
#        - prometheus
#      environment:
#        GF_SERVER_ROOT_URL: 'http://grafana'
#        GF_SECURITY_ADMIN_PASSWORD: 'admin'
#        GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-piechart-panel,grafana-simple-json-datasource  1.3.5'
#        GF_DASHBOARDS_JSON_ENABLED: 'true'
#      volumes:
#        - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
#        - ./docker/grafana/config.yml:/etc/grafana/provisioning/dashboards/config.yml
#        - ./docker/grafana/datasources/prometheus.yml:/etc/grafana/provisioning/datasources/prometheus.yml
#      restart: always

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:4.0.0
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    volumes:
      - ./docker/zookeeper/data:/data
      - ./docker/zookeeper/datalog:/datalog

  broker1:
    container_name: broker1
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - ./docker/kafka1/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_JMX_PORT: 9999
    command: /etc/prometheus/run-kafka-server-with-java-agent.sh
    restart: always

  broker2:
    container_name: broker2
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - ./docker/kafka2/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker2:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_JMX_PORT: 9999
    command: /etc/prometheus/run-kafka-server-with-java-agent.sh
    restart: always

  broker3:
    container_name: broker3
    image: confluentinc/cp-kafka:5.0.0
    hostname: broker3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - ./docker/kafka3/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker3:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_JMX_PORT: 9999
    command: /etc/prometheus/run-kafka-server-with-java-agent.sh
    restart: always

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.0.0
    hostname: schema-registry
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker1:19092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    restart: always
#
  rest-proxy:
    container_name: rest-proxy
    image: confluentinc/cp-kafka-rest:5.0.0
    hostname: kafka-rest
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
      - schema-registry
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker1:19092'
    restart: always

  cassandra:
    container_name: cassandra
    image: cassandra:3.11.4
    hostname: cassandra
    ports:
      - "9042:9042"
    expose:
      - 7000
      - 7001
      - 7199
      - 9042
      - 9160
    volumes:
      - ./docker/cassandra:/etc/cassandra/docker
    environment:
      CASSANDRA_CLUSTER_NAME: 'data-externalization'
      CASSANDRA_DC: 'local'
    restart: always

#  cweb:
#    container_name: cassandra-web
#    image: markusgulden/cassandra-web
#    depends_on:
#      - cassandra
#    environment:
#      CASSANDRA_HOST_IPS: 172.28.1.2
#      CASSANDRA_PORT: 9042
#      CASSANDRA_USER: cassandra
#      CASSANDRA_PASSWORD: cassandra
#    ports:
#      - 3000:3000

  #  elasticsearch:
  #    container_name: elasticsearch
  #    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.2.3
  #    hostname: elasticsearch
  #    ports:
  #      - "9200:9200"
  #      - "9300:9300"
  #    environment:
  #      discovery.type: single-node


  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - zookeeper
      - broker1
      - broker2
      - broker3
      - schema-registry
      - rest-proxy



#  ksqldb-server:
#    image: confluentinc/ksqldb-server:0.6.0
#    hostname: ksqldb-server
#    container_name: ksqldb-server
#    ports:
#      - "8088:8088"
#    environment:
#      KSQL_LISTENERS: http://0.0.0.0:8088
#      KSQL_BOOTSTRAP_SERVERS: 'broker1:19092,broker2:19093,broker3:19094'
#      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
#      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

#  ksqldb-cli:
#    image: confluentinc/ksqldb-cli:0.6.0
#    container_name: ksqldb-cli
#    depends_on:
#      - ksqldb-server
#    entrypoint: /bin/sh
#    tty: true
